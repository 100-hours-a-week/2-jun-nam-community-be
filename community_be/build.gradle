plugins {
	id 'java'
	id 'org.springframework.boot' version '3.4.3'
	id 'io.spring.dependency-management' version '1.1.7'
	id 'jacoco'
}

group = 'hello'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}


jacoco {
	toolVersion = "0.8.10"  // 최신 버전 확인
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-web'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	implementation 'org.springframework.boot:spring-boot-starter-jdbc'
	runtimeOnly 'com.h2database:h2'
	implementation 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok:1.18.30'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'mysql:mysql-connector-java:8.0.33'
	implementation 'com.github.vladimir-bukhtoyarov:bucket4j-core:7.6.0'
	testImplementation 'org.springframework.boot:spring-boot-starter-webflux'
	implementation 'com.github.ben-manes.caffeine:caffeine:3.1.8'
	testImplementation 'com.github.ben-manes.caffeine:caffeine:3.1.8'
	testImplementation 'org.springframework.security:spring-security-test'
}

tasks.named('test') {
	useJUnitPlatform()
}

test {
	useJUnitPlatform()
	finalizedBy jacocoTestReport

	testLogging {
		events "passed", "skipped", "failed"
		showStandardStreams = true
		exceptionFormat = 'full'
	}
}

jacocoTestReport {
	dependsOn test

	reports {
        xml.required.set(true)
        html.required.set(true)
		csv.required.set(true)

        // QueryDSL Q클래스 제외
        def Qdomains = []
        for (qPattern in "**/QA".."**/QZ") {
            Qdomains.add(qPattern + "*")
        }

        afterEvaluate {
            classDirectories.setFrom(files(classDirectories.files.collect {
                fileTree(dir: it,
                        exclude: [] + Qdomains)
            }))
        }

        xml.destination file("${buildDir}/jacoco/index.xml")
        html.destination file("${buildDir}/jacoco/index.html")
		csv.destination file("${buildDir}/jacoco/index.csv")
    }
}
